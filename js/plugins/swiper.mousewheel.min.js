/*!
 * Swiper 4.5.1 Mousewheel plugin (compatibilidad directa)
 */
(function(Swiper){
if(!Swiper) return;
var Mousewheel = {
  name: 'mousewheel',
  params: {
    mousewheel: {
      forceToAxis: false,
      releaseOnEdges: false,
      invert: false,
      sensitivity: 1,
      eventsTarged: 'container'
    }
  },
  create: function () {
    var swiper = this;
    swiper.mousewheel = {
      enabled: false,
      enable: function () {
        if (swiper.mousewheel.enabled) return;
        swiper.mousewheel.enabled = true;
        swiper.mousewheel.addEventListeners();
      },
      disable: function () {
        if (!swiper.mousewheel.enabled) return;
        swiper.mousewheel.enabled = false;
        swiper.mousewheel.removeEventListeners();
      },
      handle: function (event) {
        var e = event;
        if (e.originalEvent) e = e.originalEvent;
        var params = swiper.params.mousewheel;
        var delta = 0;
        var deltaX = 0;
        var deltaY = 0;
        if ('detail' in e) deltaY = e.detail;
        if ('wheelDelta' in e) deltaY = -e.wheelDelta;
        if ('wheelDeltaY' in e) deltaY = -e.wheelDeltaY;
        if ('wheelDeltaX' in e) deltaX = -e.wheelDeltaX;
        if ('axis' in e && e.axis === e.HORIZONTAL_AXIS) {
          deltaX = deltaY;
          deltaY = 0;
        }
        delta = deltaY === 0 && deltaX === 0 ? 0 : deltaY;
        if (Math.abs(deltaX) > Math.abs(deltaY)) delta = deltaX;
        if (params.forceToAxis) {
          if (swiper.isHorizontal() && deltaY !== 0) delta = 0;
          if (!swiper.isHorizontal() && deltaX !== 0) delta = 0;
        }
        if (delta === 0) return;
        if (params.invert) delta = -delta;
        if (params.sensitivity) delta *= params.sensitivity;
        if (delta > 0) {
          if (!swiper.isEnd || params.releaseOnEdges) swiper.slideNext();
        } else {
          if (!swiper.isBeginning || params.releaseOnEdges) swiper.slidePrev();
        }
        e.preventDefault && e.preventDefault();
        return false;
      },
      addEventListeners: function () {
        var target = swiper.params.mousewheel.eventsTarged === 'container' ? swiper.$el[0] : swiper.wrapper[0];
        target.addEventListener('wheel', swiper.mousewheel.handle, false);
      },
      removeEventListeners: function () {
        var target = swiper.params.mousewheel.eventsTarged === 'container' ? swiper.$el[0] : swiper.wrapper[0];
        target.removeEventListener('wheel', swiper.mousewheel.handle, false);
      }
    };
  },
  on: {
    init: function () {
      if (this.params.mousewheel.enabled) this.mousewheel.enable();
    },
    destroy: function () {
      if (this.mousewheel) this.mousewheel.disable();
    }
  }
};
if (Swiper.use) {
  Swiper.use(Mousewheel);
}
})(window.Swiper);